import * as joint from "@joint/core/dist/joint.js"
import graphData from './cdd.json' assert {type: 'json'}

// --- CONFIG ---

const paperWidth = 800;
const paperHeight = 800;
const defaultRectWidth = 100;
const defaultRectHeight = 40;

// --- MAIN ---

var namespace = joint.shapes;

var graph = new joint.dia.Graph({}, { cellNamespace: namespace });

//Define canvas (paper)
var paper = new joint.dia.Paper({
    el: document.getElementById('myholder'), //div in static/index.html
    model: graph,
    width: paperWidth,
    height: paperHeight,
    gridSize: 10,
    cellViewNamespace: namespace
});

//Read graph rectangle data from JSON
const graphRectsJSON = graphData.nodes;
//Dictionary for storing runtime Rectangle objects
//Key: Rectangle ID from JSON (string)
//Value: Rectangle object generated by JointJS
const graphRects = {};
//Send each rect to add-to-graph function. Store runtime rects in a list
graphRectsJSON.forEach((rectData) => graphRects[rectData.id] = addRectToGraph(rectData, graph));

//Read graph link data from JSON
const graphLinksJSON = graphData.edges;
//Dictionary for storing runtime Link objects
//Key: Link ID from JSON (string)
//Value: Link object generated by JointJS
const graphLinks = {}
//Send each link to add-to-graph function
graphLinksJSON.forEach((linkData) => graphLinks[linkData.id] = addLinkToGraph(linkData, graph, graphRects));


// --- EVENTS ---

// On double click canvas background: Run save function
paper.on('blank:pointerdblclick', function () {
    save(graphData, graphRects, graphLinks);
})


// --- FUNCTIONS --

/**
 * Add a rectangle with the given JSON values to the given graph.
 * Rectangle JSON must be OpenDI-compliant.
 * 
 * @param {JSON} rectJSON Original raw JSON data for this rectangle
 * @param {joint.dia.Graph} graph Graph object to add this rectangle to
 * @param {Number} rectWidth (Optional) Width of this rectangle
 * @param {Number} rectHeight (Optional) Height of this rectangle
 * @returns {joint.shapes.standard.Rectangle} Runtime representation of the rectangle that was added
 */
function addRectToGraph(rectJSON, graph, rectWidth = defaultRectWidth, rectHeight = defaultRectHeight)
{
    var rectToAdd = new joint.shapes.standard.Rectangle();

    //Basic attributes
    rectToAdd.position(rectJSON.x, rectJSON.y);
    rectToAdd.resize(rectWidth, rectHeight);

    //Hard-code some other attributes for now
    rectToAdd.attr({
        body: {
            fill: 'blue'
        },
        label: {
            text: rectJSON.elementtype,
            fill: 'white'
        }
    });

    rectToAdd.addTo(graph);
    return rectToAdd; //For storing the runtime rect object
}

/**
 * Add a link with the given JSON values to the given graph.
 * Link JSON must be OpenDI-compliant.
 * 
 * @param {JSON} linkJSON Original raw JSON data for this link
 * @param {joint.dia.Graph} graph Graph object to add this link to
 * @param {Array<joint.shapes.standard.Rectangle>} rectsInGraph Array of all rects in the graph
 * @returns {joint.shapes.standard.Link} Runtime representation of the link that was added
 */
function addLinkToGraph(linkJSON, graph, rectsInGraph)
{
    var linkToAdd = new joint.shapes.standard.Link();

    //Find source by the id given in JSON data
    linkToAdd.source(rectsInGraph["" + linkJSON.from]);
    //Find target by the id given in JSON data
    linkToAdd.target(rectsInGraph["" + linkJSON.to]);

    linkToAdd.addTo(graph);
    return linkToAdd; //For storing the runtime link object
}

/**
 * Save the updated rectangle and link information from the current graph
 * to an updated json file. Prompts an immediate download of the JSON file.
 * 
 * @param {JSON} originalJSON The JSON file used to create the graph originally
 * @param {Array<joint.shapes.standard.Rectangle>} rects The array of updated rects to save
 * @param {Array<joint.shapes.standard.Link>} links The array of updated links to save
 * @param {string} fileName File name for output JSON file
 */
function save(originalJSON, rects, links, fileName = "cdd.json")
{
    console.log("SAVING...");
    
    const newNodes = new Array();
    originalJSON.nodes.forEach((node) => {
        const rectFromGraph = rects[node.id];
        if(rectFromGraph !== null)
        {
            const nodePosition = rectFromGraph.get('position');
            node.x = nodePosition.x;
            node.y = nodePosition.y;
        }
        newNodes.push(node);
    });

    const jsonOut = {"nodes": newNodes, "edges": originalJSON.edges}

    console.log(JSON.stringify(jsonOut));    

    downloadFile(JSON.stringify(jsonOut), fileName);
}

/**
 * Prompt the browser to download a file with the given text content.
 * This is used to download updated JSON files, using a simple URI href.
 * This means the JSON data will download all on 1 line. Recommend using an auto-formatter to prettify the file.
 * 
 * @param {string} textContent Text content of the file to download. Here, this is expected to be a JSON string
 * @param {string} fileName Name of file to be downloaded. Here, this is expected to be a JSON file name
 */
function downloadFile(textContent, fileName)
{
    var elem = document.createElement('a');
    elem.setAttribute("href", "data:application/octet-stream;charset=utf-8," + textContent);
    elem.setAttribute("download", fileName);
    document.body.appendChild(elem);
    elem.click();
    document.body.removeChild(elem);
}